<tool id="rseqc_RPKM_saturation" name="RPKM Saturation" version="2.4galaxy1">
    <description>calculates raw count and RPKM values for transcript at exon, intron, and mRNA level</description>

    <macros>
        <import>rseqc_macros.xml</import>
    </macros>

    <requirements>
        <expand macro="requirement_package_r" />
        <expand macro="requirement_package_numpy" />
        <expand macro="requirement_package_rseqc" />
    </requirements>

    <expand macro="stdio" />

    <version_command><![CDATA[RPKM_saturation.py --version]]></version_command>

    <command><![CDATA[
        RPKM_saturation.py -i $input -o output -r $refgene

        #if str($strand_type.strand_specific) == "pair"
            -d
            #if str($strand_type.pair_type) == "sd"
                '1++,1--,2+-,2-+'
            #else
                '1+-,1-+,2++,2--'
            #end if
        #end if

        #if str($strand_type.strand_specific) == "single"
            -d
            #if str($strand_type.single_type) == "s"
                '++,--'
            #else
                '+-,-+'
            #end if
        #end if

        -l $percentileFloor -u $percentileCeiling -s $percentileStep -c $rpkmCutoff
        ]]>
    </command>

    <inputs>
        <param name="input" type="data" label="Input .bam File" format="bam" help="(--input-file)"/>
        <param name="refgene" type="data" format="bed" label="reference gene model" help="(--refgene)"/>
        <conditional name="strand_type">
            <param name="strand_specific" type="select" label="Strand-specific?" value="None">
                <option value="none">None</option>
                <option value="pair">Pair-End RNA-seq</option>
                <option value="single">Single-End RNA-seq</option>
            </param>
            <when value="pair">
                <param name="pair_type" type="select" display="radio" label="Pair-End Read Type (format: mapped --> parent)" value="sd" help="(--strand)">
                    <option value="sd"> read1 (positive --> positive; negative --> negative), read2 (positive --> negative; negative --> positive)</option>
                    <option value="ds">read1 (positive --> negative; negative --> positive), read2 (positive --> positive; negative --> negative)</option>
                </param>
            </when>
            <when value="single">
                <param name="single_type" type="select" display="radio" label="Single-End Read Type (format: mapped --> parent)" value="s" help="(--strand)">
                    <option value="s">positive --> positive; negative --> negative</option>
                    <option value="d">positive --> negative; negative --> positive</option>
                </param>
            </when>
            <when value="none"></when>
        </conditional>
        <param name="percentileFloor" type="integer" value="5" label="Begin sampling from this percentile (default=5)" help="(--percentile-floor)"/>
        <param name="percentileCeiling" type="integer" value="100" label="End sampling at this percentile (default=100)" help="(--percentile-ceiling)" />
        <param name="percentileStep" type="integer" value="5" label="Sampling step size (default=5)" help="(--percentile-step)" />
        <param name="rpkmCutoff" type="text" value="0.01" label="Ignore transcripts with RPKM smaller than this number (default=0.01)" help="(--rpkm-cutoff)" />
        <param name="mapq" value="30" type="integer" label="Minimum mapping quality for an alignment to be called 'uniquly mapped'" help="(--mapq)" />
    </inputs>

    <outputs>
        <data format="xls" name="outputxls" from_work_dir="output.eRPKM.xls" label="${tool.name} on ${on_string} (RPKM XLS)"/>
        <data format="xls" name="outputrawxls" from_work_dir="output.rawCount.xls" label="${tool.name} on ${on_string} (Raw Count XLS)"/>
        <data format="txt" name="outputr" from_work_dir="output.saturation.r" label="${tool.name} on ${on_string} (R Script)"/>
        <data format="pdf" name="outputpdf" from_work_dir="output.saturation.pdf" label="${tool.name} on ${on_string} (PDF)"/>
    </outputs>

    <tests>
        <test>
            <param name="input" value="pairend_strandspecific_51mer_hg19_random.bam"/>
            <param name="refgene" value="hg19.HouseKeepingGenes_30.bed"/>
            <output name="outputxls">
              <assert_contents>
                <has_n_columns n="26" />
                <has_line_matching expression="chr1\t16174358\t16266950\tNM_015001.*" />
              </assert_contents>
            </output>
            <output name="outputrawxls">
              <assert_contents>
                <has_n_columns n="26" />
                <has_line_matching expression="chr1\t16174358\t16266950\tNM_015001.*" />
              </assert_contents>
            </output>
            <output name="outputr">
              <assert_contents>
                <has_text text="pdf('output.saturation.pdf')" />
                <has_line_matching expression="S5=c\(\d+\.\d+\)" />
              </assert_contents>
            </output>
        </test>
    </tests>

    <help><![CDATA[
RPKM_saturation.py
++++++++++++++++++

The precision of any sample statitics (RPKM) is affected by sample size (sequencing depth);
\'resampling\' or \'jackknifing\' is a method to estimate the precision of sample statistics by
using subsets of available data. This module will resample a series of subsets from total RNA
reads and then calculate RPKM value using each subset. By doing this we are able to check if
the current sequencing depth was saturated or not (or if the RPKM values were stable or not)
in terms of genes' expression estimation. If sequencing depth was saturated, the estimated
RPKM value will be stationary or reproducible. By default, this module will calculate 20
RPKM values (using 5%, 10%, ... , 95%,100% of total reads) for each transcripts.

In the output figure, Y axis is "Percent Relative Error" or "Percent Error" which is used
to measures how the RPKM estimated from subset of reads (i.e. RPKMobs) deviates from real
expression level (i.e. RPKMreal). However, in practice one cannot know the RPKMreal. As a
proxy, we use the RPKM estimated from total reads to approximate RPKMreal.

.. image:: http://rseqc.sourceforge.net/_images/RelativeError.png
   :height: 80 px
   :width: 400 px
   :scale: 100 %

Inputs
++++++++++++++

Input BAM/SAM file
    Alignment file in BAM/SAM format.

Reference gene model
    Gene model in BED format.

Strand sequencing type (default=none)
    See Infer Experiment tool if uncertain.

Options
++++++++++++++

Skip Multiple Hit Reads
    Use Multiple hit reads or use only uniquely mapped reads.

Only use exonic reads
    Renders program only used exonic (UTR exons and CDS exons) reads, otherwise use all reads.

Output
++++++++++++++

1. output..eRPKM.xls: RPKM values for each transcript
2. output.rawCount.xls: Raw count for each transcript
3. output.saturation.r: R script to generate plot
4. output.saturation.pdf:

.. image:: http://rseqc.sourceforge.net/_images/saturation.png
   :height: 600 px
   :width: 600 px
   :scale: 80 %

- All transcripts were sorted in ascending order according to expression level (RPKM). Then they are divided into 4 groups:
    1. Q1 (0-25%): Transcripts with expression level ranked below 25 percentile.
    2. Q2 (25-50%): Transcripts with expression level ranked between 25 percentile and 50 percentile.
    3. Q3 (50-75%): Transcripts with expression level ranked between 50 percentile and 75 percentile.
    4. Q4 (75-100%): Transcripts with expression level ranked above 75 percentile.
- BAM/SAM file containing more than 100 million alignments will make module very slow.
- Follow example below to visualize a particular transcript (using R console)::

    pdf("xxx.pdf")     #starts the graphics device driver for producing PDF graphics
    x &lt;- seq(5,100,5)  #resampling percentage (5,10,15,...,100)
    rpkm &lt;- c(32.95,35.43,35.15,36.04,36.41,37.76,38.96,38.62,37.81,38.14,37.97,38.58,38.59,38.54,38.67, 38.67,38.87,38.68,  38.42,  38.23)  #Paste RPKM values calculated from each subsets
    scatter.smooth(x,100*abs(rpkm-rpkm[length(rpkm)])/(rpkm[length(rpkm)]),type="p",ylab="Precent Relative Error",xlab="Resampling Percentage")
    dev.off()          #close graphical device

.. image:: http://rseqc.sourceforge.net/_images/saturation_eg.png
   :height: 600 px
   :width: 600 px
   :scale: 80 %

-----

About RSeQC
+++++++++++

The RSeQC_ package provides a number of useful modules that can comprehensively evaluate high throughput sequence data especially RNA-seq data. "Basic modules" quickly inspect sequence quality, nucleotide composition bias, PCR bias and GC bias, while "RNA-seq specific modules" investigate sequencing saturation status of both splicing junction detection and expression estimation, mapped reads clipping profile, mapped reads distribution, coverage uniformity over gene body, reproducibility, strand specificity and splice junction annotation.

The RSeQC package is licensed under the GNU GPL v3 license.

.. image:: http://rseqc.sourceforge.net/_static/logo.png

.. _RSeQC: http://rseqc.sourceforge.net/
]]>
    </help>

    <expand macro="citations" />

</tool>
